{
    "id": 73,
    "description": "Given the path to a directory and the path to an html file, the function recursively reads the contents of the directory and builds the tree of the directory structure in html, saves the tree in the input html file, returns the built tree.",
    "text": "Define the recursive function (or a function that uses one of your\n    recursive functions) es73(dir, htmlfile) that, given a directory\n    name, reads its structure and recursively constructs the\n    my_html.HTMLNode node tree of an html document to be saved in a\n    file.\n    Arguments:\n        dir:      path to the root directory to scan\n        htmlFile: path of html file to write\n\n    The tree to be built must contain a series of bulleted lists that\n    list the files and directories found according to the structure:\n    <ul>\n        <li>rootDir\n            <ul>\n                <li>fileName</li>\n                <li>dirName\n                    <ul>\n                    <li>fileName</li>\n                    <li>fileName</li>\n                    </ul>\n                </li>\n                <li>fileName</li>\n                <li>dirName\n                    <ul>\n                    <li>fileName</li>\n                    <li>fileName</li>\n                    </ul>\n                </li>\n            </ul>\n        </li>\n    </ul>\n    (note, the structure is indented for the sake of clearness, but it\n    should not be done to pass all the tests).  To produce the HTML\n    file shown, first build the my_html.HTMLNode tree and then\n    save it to file.  The tree should contain a node with tag=\"ul\" for\n    each directory. Inside the tag 'ul' there should be as many tag='li' as\n    the number of file/dir contained (in alphabetical order).  Each\n    'li' tag contains the file/dir name (in the form of a\n    tag='_text_').  If it is a directory, after the tag '_text_' a tag\n    'ul' is added which lists the contents of the directory. .\n",
    "algorithm": "We declare the recursive function pathToDom(path, name):\n\tgiven in input the path and the name of a file/directory, returns the corresponding HTML tree\n\tinitializes a DOM variable of type HTMLNode, with tag 'li', 'attr' an empty dictionary and 'content' a list with tag type '_text_', 'attr' an empty dictionary and 'content' the file name\n\tif the file is a directory (we build the directory tree):\n\t\tinitializes an empty contained list\n\t\ttake the directory files and order them\n\t\tfor each file:\n\t\t\tcreate the path to the file\n\t\t\tadd to contained the result of pathToDom(newpath, filename)\n\t\tadd an 'ul' tag to the DOM content with the contained list, attr as an empty diz\n\treturn DOM\n\n\nes73(...)\n\tsaves in a variable li the result of the call to pathToDom(...) on the directory\n\tcreates a DOM variable of type HTMLNode with tag 'ul' and content li\n\twrites in the html file the result of DOM.toString()\n\treturn DOM",
    "tags": ["Trees", "File", "File Search", "Html"],
    "effort": 6,
    "clues": [],
    "from": "esame-15-2-18"
}

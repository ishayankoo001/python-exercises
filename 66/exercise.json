{
    "id": 66,
    "description": "Given a BinaryTree, return the maximum width of the tree, i.e. the difference between the positions of the rightmost and the leftmost nodes of the tree.",
    "text": "Design  a function ex66(tree) such that:\n    - it is recursive or uses recursive functions(s)/method(s),\n    - it receives as argument a tree that consists of nodes of type\n      BinaryTree, defined in the attached tree.py library,\n    - it returns the 'maximum width' of the tree, i.e. the\n      difference between the position of the rightmost node of the\n      tree and the position of the leftmost node of the tree\n\n    The position of a node with respect to the root (which we assume\n    is at position 0) can be computed following the path from the root\n    to such a node: subtract 1 (one) whenever following a left\n    subtree, add 1 (one), whenever following a right subtree.\n    Example: if the tree is the one below on the left, the positions\n    will be those in the tree on the right:\n\n             1           .            0         .\n            / \\          .           / \\        .\n           2   3         .         -1   1       .\n          / \\            .        /  \\          .\n        4    5           .      -2    0         .\n       /    /            .      /    /          .\n      6    7             .    -3    -1          .\n       \\    \\            .      \\    \\          .\n        8    9           .      -2    0         .\n\n    The leftmost node (with value 6) is at position -3.\n    The rightmost node (with value 3) is at position 1.\n    Then the function returns the value 4=1-(-3).\n",
    "algorithm": " xxx ",
    "tags": ["Trees", "Recursion"],
    "effort": 9,
    "clues": [],
    "from": "esame-12-7-18"
}

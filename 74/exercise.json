{
    "id": 74,
    "description": "Given a Png image, the coordinates of a point, a thickness, a list of colors and a path to another Png image, the function draws a series of rings over the Png image, with the center of the coordinates of the input point, then saves the image to the second Png file, returns the list with the number of colored pixels for each color.",
    "text": "Design and implement the function\n    es74(filePng, center, thickness, colors, pngFileOut) that, given a\n    png image, draws a target (namely a series of colored rings) on it\n    and saves the image in a second PNG file.  The function returns a\n    list containing the number of pixels colored of each color, in\n    order.\nNote: to avoid rounding errors, do not calculate the distance of a\n      pixel from the center with the square root, but compare the sum\n      of the square of the sides with the square of the radius of the\n      current circle (in short, use Pythagora's theorem).\nNote: for each ring the pixels on the inner edge must be included (use\n      the >= comparison) while those on the outer edge must be\n      excluded (use the < comparison)\nThe parameters are the following:\n      filePng:  the pathname of the PNG file containing the image to modify\n      center: a pair (x, y) indicating the coordinates of the center\n              of the target\n      thickness: thickness of the rings\n      colors: list of colors to be applied in order from the center to\n              the outermost ring \n      return: list with the number of pixels colored of each color\n",
    "algorithm": "We define a new drawAnello function (img, center, rIn, rOut, color): \n\t the function draws in the image img a ring with outer radius rOut and inner radius rIn of the color passed in input, with center the coordinates in input \n\t initialize count to 0 \n\t save in h and w the image sizes \n\t to avoid to get out from the image calculate 4 variables \n\t minx = maximum between x coordinates of the center minus rOut and 0 (if the number is negative I'm exiting the image, and so minx will be 0)\n\t miny = maximum between y coordinates of the center minus rOut and 0 \n\t maxx = minimum between x coordinates of the center minus rOut and w (prevents drawing the ring outside the image on the right)\n\t maxy = minimum between y coordinates of the center minus rOut and h \n\t having the 4 coordinates I can scan only the area of the ring, instead of the whole image\n\t for x that goes from minx to maxx: \n\t\t for y which goes from min y to maxy: \n\t\t\t calculate the squared distance from the center of the pixel((x-centroX)**2+(y-centroY)**2) \n\t\t\t if between rIn**2 and rOut**2: \n\t\t\t\t color the pixel of img \n\t\t\t\t increment count \n\t return count \n\n\n es74(...) load the image in img \n\t initialize a blank list named counts \n\t for each color of the color list: \n\t\t calculate the radiusIn (color index *thickness) \n\t\t calculate the radiusOut ((color index +1)*thickness) \n\t\t add to counts the result of the call to drawAnello(...) \n\t save the image \n\t return counts",
    "tags": ["Images", "Matrices"],
    "effort": 6,
    "clues": [],
    "from": "esame-15-2-18"
}

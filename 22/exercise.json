{
    "id": 22,
    "description": "Given a PNG file and a JSON file, read the PNG file and encode it in an array of strings, each pixel becomes a string of 9 characters, save the encoded array in the JSON file and return the lexicographically smaller string, among those that appear in the array with higher frequency",
    "text": "Design and implement a function ex22(pngFile, jsonFile) such that:\n    - it takes as arguments two path names ('pngFile' and 'jsonFile')\n    - it reads and encodes the PNG image stored in the 'pngFile' and\n      saves the encoded image in a JSON file, named 'jsonFile'\n    - it returns the most frequent encoding string used during the\n      encoding of the whole image.\n\n    The image should be encoded in an matrix (list of lists) M of\n    strings with dimensions w x h, where w is the width of the image\n    and h is its height. For each pixel [i][j] of the image, the\n    corresponding cell M[i][j] contains a string that encodes the\n    color of that pixel: each of the three R, G and B components of\n    the pixel color are encoded with a string of 3 characters,\n    obtaining a string of 9 characters with their concatenation,\n    keeping the R, G and B order. For example the color (0,0,0) is\n    encoded as '000000000' and the color (50,10,200) as '050010200'.\n    The function returns the most frequent string of the matrix, in\n    case of tie, the first one in alphabetical order.\n\n    To load and save the image in the PNG file, use the load and save\n    functions of the images.py library.",
    "algorithm": "define two functions: \n codifica(tuple) \n\t return the appropriate encoded pixel string\n adatta(x) \n\t return an integer encoded in a string of 3 characters \n\n load the PNG image \n initialize an empty dictionary and an array of empty strings equal to the array of the image \n for each pixel: \n\t encode the pixel \n\t save the 9 characters string in the matrix \n\t update the counter in the dictionary for that pixel \n save the matrix in the JSON file \n order the matrix composed by the items of the dictionary \n return the first string of the matrix",
    "tags": ["Matrices", "Images", "Strings"],
    "effort": 5,
    "clues": [],
    "from": "recupero-12-7-18"
}

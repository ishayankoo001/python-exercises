{
    "id": 1, 
"description": "Given two BinaryTree objects, build a third BinaryTree object with the same structure as that of the input trees and the values computed as the sum of the subtrees’ nodes values, then return its root.",
    "text": "    Ex 1: 6 points.\n    Design and implement a function ex1(tree1, tree2) such that:\n    - it is recursive or uses recursive functions(s)/method(s);\n    - it receives two trees as arguments ('tree1' and 'tree2') that consist of\n      nodes of type BinaryTree, defined in the attached tree.py library;\n    - it generates a tree of type BinaryTree;\n    - it returns the generated tree’s root as a result.\n    The two input trees have the same structure but the information contained in\n    the value attribute of the corresponding nodes may be different. The tree to\n    be generated should have the same structure of the two input trees. The\n    value of the nodes of the new tree is computed according to the following\n    rule.\n    Let z be a node in the generated tree, x and y be the two corresponding\n    nodes of tree1 and tree2, respectively. To compute the value of z, operate\n    as follows:\n    - Compute the sum of the values of the nodes in the subtree of tree1 rooted\n      in x;\n    - Compute the sum of the values of the nodes in the subtree of tree2 rooted\n      in y;\n    - The sum of the two sums above is assigned to the value of z.\n    Example: if tree1 and tree2 are the two trees below on the left-hand side,\n    then the returned tree will be the one below on the right-hand side.\n\n    WARNING: - The use of the functions of the BinaryTree class is FORBIDDEN.\n             - The two input trees should not be changed.\n\n             1              7            90           |\n            /\\             /\\            /\\           |\n           2  3           1  3         76  6          |\n          / \\            / \\           / \\            |\n        4    5          4   6        36  37           |\n       /    /          /   /         /   /            |\n      6    7          5   2         28 26             |\n     /     \\         /    \\        /    \\             |\n     8      9       9      8      17    17            |",
    "algorithm": "",
    "tags": ["Recursion", "Trees"],
    "effort": 6,
    "clues": [],
    "from":"Exam-2018-11-07"
}

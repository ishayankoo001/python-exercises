{
    "id": 5,
    "description": "Takes as input a set of strings and an integer k, returns a set containing the different strings that can be obtained by concatenating k times the strings in the input set", 
    "text": "\n    Design  and implement the recursive function es11(string_set, k)\n    (or that uses recursive function(s) or method(s)) that:\n    - takes as arguments a set of strings and an integer k > 0\n    and:\n    - finds the different strings that can be obtained as the\n      concatenation of k copies of the original strings (the same\n      string can be used several times for concatenation).\n    - returns as a result the set of strings found.\n    EXAMPLES: if string_set = {'a','bb','c'}\n    1)  es5(string_set, 1) returns {'a','bb','c'}\n    2)  es5(string_set, 2) returns {'aa','abb','ac','bba','bbbb','bbc',\n                                    'ca','cbb','cc' }\n    3)  es5(string_set, 3) returns\n    {'bbca', 'bbbbbb', 'ccc', 'cca', 'caa', 'ccbb', 'bbaa', 'abbc', 'aac',\n     'abbbb', 'acbb', 'cbbc', 'bbbba', 'bbabb', 'cbba', 'cac', 'bbac',\n     'acc', 'aabb', 'aca', 'bbbbc', 'aaa', 'cbbbb', 'abba', 'bbcbb',\n     'cabb', 'bbcc}\n\n    TIP: you can simulate the loop on k with recursion\n\n    ", 
    "algorithm": "define a new function recEs5(sourceSet, resSet, k):\n\tif k is equal to 1:\n\t\treturns resSet\n\telse:\n\t\tcreate a new set\n\t\tfor each el2 element in sourceSet:\n\t\t\tfor each el2 element in resSet:\n\t\t\t\tinsert in the new set the concatenation of el1 and el2\n\t\treturn recEs5(sourceSet, new set, k-1)\n\n\n\nes5(set, k)\n\treturn recEs5(set, set, k)", 
    "tags": ["Recursion", "Sets", "Strings"], 
    "effort": 6,
    "clues": [],
    "from":"exam-7-11-18"
}

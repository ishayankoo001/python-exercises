{
    "id": 38,
    "description": "Given a maze, in the form of a list of lists, returns the coordinates (x, y) of the lowest and rightmost cell, reachable from the cell (0, 0)",
    "text": "\n    A labyrinth is represented by a grid (list of lists).  Labyrinth\n    cell positions are determined by pairs (x,y) where y is the row\n    and x is the column in which the cell is located.\n    The cell at the top left has coordinates (0,0).\n   \n    The grid cells contain the integer 0 (free) or the integer 1\n    (obstacle).\n    You can move between two adjacent cells only if the destination\n    cell contains the integer 0 (it is empty) AND with only two types\n    of moves:\n    - from top to bottom (from a generic cell (x,y) to the cell\n    (x,y+1) )\n    - from left to right (from a generic cell (x,y) to the cell\n    (x+1,y) )\n\n    A cell (x,y) is reachable if there is at least a sequence of moves\n    that starts from the cell (0,0) and terminates in (x,y).\n\n    Write the function es38(labyrinth) which takes as an input a\n    labyrinth represented as above and returns the coordinates (x, y)\n    of the lowest reachable cell and (in case of tie) the rightmost\n    one.\n\n    For example: for the 7x7 size labyrinth:\n    0001000\n    1000010\n    0001010\n    1010010\n    0011010\n    1001011\n    0110100\n\n    the function must return the tuple (4, 5).\n\n    Note: The list of lists must not be changed by the function.\n",
    "algorithm": "Create a copy of the labyrinth\nmark the first cell as reachable\nset the starting position (0, 0) as the most distant position that can be reached\nscan each cell\n\tif the cell is to the right of a reachable cell or if it is under a reachable cell\n\t\tmark the cell as reachable\n\t\tupdate the position of the cell as the furthest reachable\nwhen done, return the found position",
    "tags": ["Matrices"],
    "effort": 8,
    "clues": [],
    "from": "recuper-16-3-18"
}

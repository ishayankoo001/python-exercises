{
    "id": 67,
    "description": "Given a path in the filesystem, the function recursively explores the corresponding directory and returns a dictionary with the found file extensions as keys and an integer as values.",
    "text": "WARNING: it's FORBIDDEN to use the os.walk function or other\n    library functions that allow to search all the files in a\n    directory (you have to explore the directory)\n\n    Define the recursive function (or a function that uses your\n    recursive functions) es67 that:\n    - receives as input the pathname of a directory and\n    - recursively explores the corresponding directory and returns a\n    dictionary.\n\n    NOTE: all files and directories starting with '.' should be ignored.\n\n    The dictionary has the file extensions found in the directory as its key\n    (i.e. the last 3 characters of the file name, ex: 'txt', 'pdf', 'png').\n    The value associated with each key K is the distance (difference in depths)\n    between the deepest file that has that extension and the shallowest.\n    Assume that the files contained in the input directory are at depth 0.\n    Example:\n    if in the directory with path='A1' there are only two files of type 'txt'\n        A1/a/b/c/d/e/f/g/h/pippo.txt    at depth 8    (counting A1 = 0)\n        A1/d/f/pappo.txt                at depth 2\n        result contains the pair key: value\n        'txt' : 6\n",
    "algorithm": "let's define a function minmassimi(path, m, M, depth)\n\tgiven a path to a directory, two dictionaries m and M, with the extension as key and the minimum and maximum height respectively as value, and 'depth' the depth of the directory\n\tfor each filename in the directory:\n\t\tI build the path to the filename\n\t\tif the path is a directory:\n\t\t\tcall minmassimi(new_path, m, M, depth+1)\n\t\telse:\n\t\t\tI take the file extension\n\t\t\tI update the value for the extension in the m and M dictionaries via the min(...) and max(...) functions.\n\nthe function es67(path) will be:\n\tI initialize the two minimum and maximum dictionaries\n\tcall the function minmassimi(path, minimum, maximum, 0)\n\treturn a dictionary with the extensions in the two dictionaries as keys and the difference of the values in the two dictionaries as values",
    "tags": ["Recursion", "File Search", "Dictionaries"],
    "effort": 9,
    "clues": [],
    "from": "esame-12-7-18"
}
